"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Generated by CoffeeScript 2.3.1
(function () {
  window.Stats =
  /*#__PURE__*/
  function () {
    function _class() {
      var _this = this;

      _classCallCheck(this, _class);

      _.bindAll(this, 'load');

      this.sources = {
        times: new StatsDataSourceTimes(),
        domains: new StatsDataSourceDomains(),
        hits: new StatsDataSourceHits(),
        ips: new StatsDataSourceIPs(),
        loads: new StatsDataSourceLoads(),
        writing: new StatsDataSourceWriting()
      };
      $('.fullscreen').click(function () {
        _this.launchFullScreen();

        return false;
      });
      this.load();
    }

    _createClass(_class, [{
      key: "launchFullScreen",
      value: function launchFullScreen() {
        var el;
        el = document.documentElement;

        if (el.requestFullscreen) {
          return el.requestFullscreen();
        } else if (el.mozRequestFullScreen) {
          return el.mozRequestFullScreen();
        } else if (el.webkitRequestFullscreen) {
          return el.webkitRequestFullscreen();
        } else if (el.msRequestFullscreen) {
          return el.msRequestFullscreen();
        }
      }
    }, {
      key: "load",
      value: function load() {
        var _this2 = this;

        return $.getJSON('https://wb.gs/api/ServerStats').done(function (data) {
          _this2.sources.times.update(data.scriptTimes);

          _this2.sources.domains.update(data.domains);

          _this2.sources.hits.update(data.hits);

          _this2.sources.ips.update(data.ips);

          _this2.sources.loads.update(data.loads);

          return _this2.sources.writing.update(data.writing);
        }).always(function () {
          return setTimeout(_this2.load, 2000);
        });
      }
    }]);

    return _class;
  }();
}).call(void 0);